>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Create a python virtualenv named "ENV"
$ virtualenv2 ENV

# Activate it (enter into the environment)
$ source ENV/bin/activate

# From now on you can use pip install etc., and that will only
# affect the virtual environment
$ pip install pwntools

# Deactivate it (exit)
$ deactivate



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Generate pwntools template
$ pwn template ./1996 > crack.py

# How to run crack the target under GDB
./crack.py
# The same, but also running GDB
./crack.py LOCAL GDB



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Interesting pwn functions to find the right
# buffer size to arrive to the saved instruction
# pointer.
>> cyclic(100)
>> cyclic_find("jaaa")



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Some tips about pwntools
https://github.com/Naetw/CTF-pwn-tips



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# In GDB, see the memory map of the running process.
# This shows all the sections (code, data, stack, heap, etc.),
# and their **permissions**: r, w, x.
gef> vmmap
# Note that section permissions can be overwritten with
# mprotect (or cat to /proc/pid/maps).



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# In GEF, you can check which protections are enabled with the
# checksec command:
#   - NX bit: (check GDB vmmap)
#   - stack-protection : per-thread random value generate at load time,
#                        pushed to the stack in the function prologue,
#                        and checked in the epilogue. If the value changed,
#                        the code assumes something is doing nasty things
#                        (e.g., buffer overflow).
#   - Fortify: protects vulnerable string functions (e.g. strcpy),
#              instrumenting the code to add additional checks.
#   - RElRO: Relocation Read/Only; related to GOT and PLT sections,
#            (for dynamic linking) to make them read-only.
#            Protection can be "partial" (for lazy loading) or "full".
#   - PIE:  Position Independent Code (code and GOT). PIE code is less
#           efficient, because it cannot use static addresses,
#           so it must compute addresses for any memory access.
#           PIE gives more protection, because there cannot be global
#           variables or other any exploitable static addresses.
#
# The 'checksec' is available as a standalone program.



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Abilitare la generazione del core dump di un programma:

    $ ulimit -c unlimited
#
# A questo punto e' possibile lanciare gdb passandogli
# l'eseguibile ed il core dump, in modo da osservare lo
# stato del programma nel momento del crash:

    $ gdb ./program ./core.dump
